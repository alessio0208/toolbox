This tutorial has been created for patching a Tor-browser-selenium version downloaded from https://github.com/webfp/tor-browser-selenium.

###############################################################################
###############################################################################
##### tor-browser-selenium/tbselenium/tbdriver.py needs to be patched.
###############################################################################
###############################################################################

1) Add the following libraries to the file:

        # AM: Start modification!
        import time, os
        from selenium.common.exceptions import TimeoutException
        from selenium.common.exceptions import WebDriverException
        from PIL import Image
        # AM: End modification!

2) Add the following line to the init function of TorBrowserDriver

        self.setup_capabilities(capabilities)
        # AM: Start modification!
        self.capabilities['acceptSslCerts'] = True
        # AM: End modification! 

3) Add the following functions to the class TorBrowserDriver
    
        # AM: Start modification!
        def _one_tab_opened(self):
		"""We make sure that only one tab is opened"""
		main_window = self.current_window_handle
		if len(self.window_handles) > 1:
			for window_handle in self.window_handles:
				if window_handle != main_window:
					self.switch_to_window(window_handle)
					self.close()
        
        def load_url_improved(self, list_urls, runidentifier, hostname, urlfile, timeout):
		"""Load a URL and wait its complete load or redirect before returning."""
		for url in list_urls:
                                    # If the URL list is not selected carefully, some of the URLs may cause redirects.
			# Despite of these redirects, in most of the cases the same page content is loaded.
			# However, if the name of the URL slightly differenciates (due to redirects), later 
			# this may cause the creation of different classes representing the same content.
			#
			# !!! Anyway, when you create your URL kink list, you should be very carefull
			# when you select the domains !!!
			current_url_page = url
			endtime = None
			
			# Make sure that only one tab is opened
			self._one_tab_opened()
			
			while(True):
				try:
					self.get("about:blank")
					break
				except WebDriverException as webdriver_err:
					if self.current_url == "about:blank":
						break
					else:
						sleep(1.0)
				
			
			# Read number of streams: Wait until there is no traffic flowing through Tor anymore
			while(True):
				number_streams_file = open(environ["dir_CRAWLING"] + 'tmp/number-streams', 'r')
				number_streams = number_streams_file.read()
				number_streams_file.close()
				
				if number_streams.replace('\n','') == '0':
					break
				else:	
					sleep(1.0)
			
			# Set page load timeout
			try:
				self.set_page_load_timeout(timeout) # seconds
			except WebDriverException as seto_exc:
				print "Setting soft timeout " + str(seto_exc)
			
			# Start loading page. We also check for redirects!
			while(True):
				starttime = int(time.time() * 1000)
				
				try:
					if current_url_page.startswith("http"):
						self.get(current_url_page)
					else:
						self.get(("http://" + current_url_page))
				except WebDriverException as webdriver_err:
					endtime = -5 # Reached error page
					break
					
				try:
					WebDriverWait(self, timeout).until(EC.presence_of_element_located((By.TAG_NAME, "body")))
				except TimeoutException as timeout_err:
					endtime = -1 # Loading timeout
					break
					
				# Check for redirects, wait 15 seconds (!!! Updated from 5 to 15 seconds, because 5 seconds are not enough !!!)
				try:
					wait = WebDriverWait(self, 15)
					wait.until(lambda self: self.current_url != current_url_page)
					current_url_page = self.current_url
				except TimeoutException as timeout_err:
					break
			
			if endtime == None and self.current_url == "about:blank":
				endtime = -2 # Empty page loaded
				
			elif endtime == None and self.current_url == "about:newtab":
				endtime = -3 # New tab page loaded
				
			# Actually, we do not need this statement any more, since it is not reliable, i.e.,
			# it often returns 'complete' even if the page is not completely loaded.
			elif endtime == None and self.execute_script("return window.content.document.readyState;") == "loading":
				endtime = -4 # Loading failed (didn't finish)
			
			elif endtime == None:
				# Loading successful
				endtime = int(time.time() * 1000)
				endtime -= 15000
				
				urlname = url.replace(':','_').replace('/','_').replace('?','_') + "___-___" + str(starttime)
				
				# Make sure that only one tab is opened
				self._one_tab_opened()
			
				# Save screenshot for the webpage
				screenshot_filename = str(environ["dir_CRAWLING"] + "screenshots/" + urlname + ".png")
				self.fullpage_screenshot(screenshot_filename)
				
				# Save a page source for the webpage
				pagesource_filename = str(environ["dir_CRAWLING"] + "txtdumps/" + urlname + ".txt")
				pagesource_file = open(pagesource_filename, 'w')
				pagesource_file.write(self.page_source.encode("utf-8"))
				pagesource_file.close()
				
			# Save start and end time
			timestamp_file = open(environ["dir_CRAWLING"] + "timestamps/" + runidentifier + "-" + hostname + "-" + urlfile.split("run-")[1].split("-random-")[0] + ".log", 'a')
			timestamp_file.write(url + " " + str(starttime) + " " + str(endtime) + "\n")
			timestamp_file.close()
				
			# Save end of page load workaround. Streams can be killed.
			saveend_file = open(environ["dir_CRAWLING"] + "tmp/tmp-kill-streams", 'w')
			saveend_file.write('1')
			saveend_file.close()
				
			sleep(5.0)
			
		# Signal termination
		terminate_file = open(environ["dir_CRAWLING"] + "tmp/.lock-" + hostname, 'w')
		terminate_file.write('1')
		terminate_file.close()	
	
        def fullpage_screenshot(self, screenshot_filename):
		"""Full page screenshot workaround."""
		
		total_width = self.execute_script("return document.body.offsetWidth;")
		total_height = self.execute_script("return document.body.parentNode.scrollHeight;")
		viewport_width = self.execute_script("return document.body.clientWidth;")
		viewport_height = self.execute_script("return window.innerHeight;")
		
		if total_width >= viewport_width and total_height >= viewport_height:
			rectangles = []
			i = 0
			while i < total_height:
				ii = 0
				top_height = i + viewport_height
			
				if top_height > total_height:
					top_height = total_height
				
				while ii < total_width:
					top_width = i + viewport_width
				
					if top_width > total_width:
						top_width = total_width
					
					rectangles.append((ii, i, top_width,top_height))
				
					ii = ii + viewport_width
				
				i = i + viewport_height
			
			stitched_image = Image.new('RGB', (total_width, total_height))
			previous = None
			part = 0
		
			for rectangle in rectangles:
				if not previous is None:
					self.execute_script("window.scrollTo({0}, {1})".format(rectangle[0], rectangle[1]))
					time.sleep(0.2)
				
				file_name = "part_{0}.png".format(part)
			
				self.get_screenshot_as_file(file_name)
				screenshot = Image.open(file_name)
			
				if rectangle[1] + viewport_height > total_height:
					offset = (rectangle[0], total_height - viewport_height)
				else:
					offset = (rectangle[0], rectangle[1])
				
				stitched_image.paste(screenshot, offset)
			
				del screenshot
				os.remove(file_name)
				part = part + 1
				previous = rectangle
			
			# Compression needed; sometimes, the screenshots are too huge, e.g., more than 30MB.
			stitched_image.save(screenshot_filename, quality=10, optimize=True)
		else:
			self.save_screenshot(screenshot_filename)
		
        # AM: End modification!

4) In the function to set_tb_prefs_for_using_system_tor(self, control_port), comment the following line: 

        # AM Start modification!
        # Since it is not still clear why the authors modified this preference, we do not apply it!
        #set_pref('extensions.torbutton.block_disk', False)
        # AM: End modification!
